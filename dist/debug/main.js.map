{"version":3,"sources":["../../scripts/main.ts","../../scripts/phase-mode.ts"],"sourcesContent":["import { world, system } from \"@minecraft/server\";\nimport { initializePhantomPhase, updatePhaseConfig } from \"./phase-mode\";\n\nlet ticksSinceLoad = 0;\n\nfunction mainTick() {\n  ticksSinceLoad++;\n\n  if (ticksSinceLoad === 60) {\n    world.sendMessage(\"§6Phantom Phase system starting minBps: 8...\");\n    initialize();\n  }\n\n  system.run(mainTick);\n}\n\nfunction initialize() {\n  // Initialize the phantom phase system with custom configuration\n  initializePhantomPhase({\n    speedThresholdBps: 8.0, // Enter phase mode at this speed (blocks/second)\n    exitSpeedThresholdBps: 2.0, // Exit phase mode below this speed\n    inactiveFramesThreshold: 20, // Wait this many frames below exit speed before leaving phase mode\n    debugMessages: true, // Show debug messages\n    preserveInventory: true, // Don't lose inventory during mode changes\n  });\n\n  // Example of updating configuration later if needed\n  // system.runTimeout(() => {\n  //   updatePhaseConfig({\n  //     speedThresholdBps: 2.5,  // Lower threshold for easier activation\n  //     debugMessages: false     // Turn off debug messages after initial setup\n  //   });\n  // }, 1200); // 1 minute later (20 ticks/second * 60 seconds)\n}\n\nsystem.run(mainTick);\n","import { world, system, Entity, GameMode, Player, Vector3 } from \"@minecraft/server\";\r\n\r\n// Configuration interface for\r\ninterface PhaseConfig {\r\n  speedThresholdBps: number;\r\n  exitSpeedThresholdBps: number;\r\n  inactiveFramesThreshold: number;\r\n  ticksPerSecond: number;\r\n  speedCheckInterval: number;\r\n  debugUpdateInterval: number;\r\n  debugMessages: boolean;\r\n  preserveInventory: boolean;\r\n}\r\n\r\n// Player phase mode data type\r\ninterface PhasePlayerData {\r\n  player: Player;\r\n  lastPosition: Vector3;\r\n  previousSpeed: number;\r\n  inactiveFrames: number;\r\n  previousGameMode?: GameMode;\r\n}\r\n\r\n// Map to track players in phase mode\r\nconst playersInPhaseMode = new Map<string, PhasePlayerData>();\r\n\r\n// Default configuration constants\r\nconst DEFAULT_CONFIG: PhaseConfig = {\r\n  speedThresholdBps: 8.0,\r\n  exitSpeedThresholdBps: 2.0,\r\n  inactiveFramesThreshold: 20,\r\n  ticksPerSecond: 60,\r\n  speedCheckInterval: 1,\r\n  debugUpdateInterval: 10,\r\n  debugMessages: true,\r\n  preserveInventory: true,\r\n};\r\n\r\n// Active configuration\r\nlet config: PhaseConfig = { ...DEFAULT_CONFIG };\r\n\r\n/**\r\n * Gets player speed directly from the flying_speed component\r\n * Throws an error if the component is not available\r\n */\r\nfunction calculatePlayerSpeed(\r\n  player: Player,\r\n  previousPosition: Vector3,\r\n  intervalTicks: number = config.speedCheckInterval\r\n): number {\r\n  const velocity = player.getVelocity();\r\n  return 17 * Math.sqrt(velocity.x ** 2 + velocity.y ** 2 + velocity.z ** 2);\r\n}\r\n\r\n/**\r\n * Switches player to spectator mode and adds them to phase mode tracking\r\n */\r\nfunction enterPhaseMode(player: Player): void {\r\n  if (player.getGameMode() === GameMode.spectator) {\r\n    if (config.debugMessages) {\r\n      world.sendMessage(`§e${player.name} is already in spectator mode, not entering phase mode again.`);\r\n    }\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const previousMode = player.getGameMode();\r\n    player.setGameMode(GameMode.spectator);\r\n    world.sendMessage(`§b${player.name} is phasing out of reality! (from ${previousMode} mode)`);\r\n\r\n    playersInPhaseMode.set(player.id, {\r\n      player,\r\n      lastPosition: player.location,\r\n      previousSpeed: 0,\r\n      inactiveFrames: 0,\r\n      previousGameMode: previousMode,\r\n    });\r\n  } catch (e) {\r\n    world.sendMessage(`§cERROR: Failed to set ${player.name} to spectator mode: ${e}`);\r\n  }\r\n}\r\n\r\n/**\r\n * Switches player back to survival mode and removes them from phase tracking\r\n */\r\nfunction exitPhaseMode(player: Player): void {\r\n  try {\r\n    const phaseData = playersInPhaseMode.get(player.id);\r\n    // Use the previous game mode if available, otherwise default to survival\r\n    const targetMode = phaseData?.previousGameMode ?? GameMode.survival;\r\n\r\n    player.setGameMode(targetMode);\r\n    world.sendMessage(`§a${player.name} has returned to reality! (back to ${targetMode} mode)`);\r\n    playersInPhaseMode.delete(player.id);\r\n  } catch (e) {\r\n    world.sendMessage(`§cERROR: Failed to restore ${player.name}'s game mode: ${e}`);\r\n    // Still try to clean up the tracking data\r\n    playersInPhaseMode.delete(player.id);\r\n  }\r\n}\r\n\r\n/**\r\n * Displays debug information about a player's current speed and phase status\r\n */\r\nfunction logPlayerDebugInfo(player: Player): void {\r\n  if (!config.debugMessages || system.currentTick % config.debugUpdateInterval !== 0) {\r\n    return;\r\n  }\r\n\r\n  const currentPos = player.location;\r\n  const playerData = playersInPhaseMode.get(player.id);\r\n  const isInPhaseMode = playerData && player.getGameMode() === GameMode.spectator;\r\n  const lastPos = playerData ? playerData.lastPosition : currentPos;\r\n\r\n  try {\r\n    const speed = calculatePlayerSpeed(player, lastPos);\r\n    const speedColor = speed > config.speedThresholdBps ? \"§a\" : speed > config.exitSpeedThresholdBps ? \"§e\" : \"§c\";\r\n\r\n    world.sendMessage(\r\n      `§7${player.name}: speed=${speedColor}${speed.toFixed(2)} §7b/s, isGliding=${\r\n        player.isGliding ? \"§aYes\" : \"§cNo\"\r\n      }, gameMode=${player.getGameMode()}, phaseMode=${isInPhaseMode ? \"§aYES\" : \"§cNO\"}`\r\n    );\r\n  } catch (e: any) {\r\n    // If we can't get speed, just show that the component is not available\r\n    world.sendMessage(\r\n      `§7${player.name}: §cSpeed component not available, isGliding=${\r\n        player.isGliding ? \"§aYes\" : \"§cNo\"\r\n      }, gameMode=${player.getGameMode()}, phaseMode=${isInPhaseMode ? \"§aYES\" : \"§cNO\"}`\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Initializes tracking data for a new player\r\n */\r\nfunction initializePlayerTracking(player: Player): PhasePlayerData {\r\n  return {\r\n    player,\r\n    lastPosition: player.location,\r\n    previousSpeed: 0,\r\n    inactiveFrames: 0,\r\n    previousGameMode: player.getGameMode(),\r\n  };\r\n}\r\n\r\n/**\r\n * Updates phase status for players already in phase mode\r\n */\r\nfunction updateExistingPhasePlayer(player: Player, phaseData: PhasePlayerData): void {\r\n  try {\r\n    const currentSpeed = calculatePlayerSpeed(player, phaseData.lastPosition);\r\n\r\n    phaseData.lastPosition = player.location;\r\n    phaseData.previousSpeed = currentSpeed;\r\n\r\n    if (currentSpeed < config.exitSpeedThresholdBps) {\r\n      phaseData.inactiveFrames++;\r\n\r\n      if (phaseData.inactiveFrames >= config.inactiveFramesThreshold) {\r\n        exitPhaseMode(player);\r\n      }\r\n    } else {\r\n      phaseData.inactiveFrames = 0;\r\n    }\r\n  } catch (e: any) {\r\n    if (config.debugMessages) {\r\n      world.sendMessage(`§c${player.name}: ${e.message}`);\r\n    }\r\n    // If we can't get speed, just keep current state\r\n  }\r\n}\r\n\r\n/**\r\n * Updates and checks players not in phase mode\r\n */\r\nfunction updateRegularPlayer(player: Player): void {\r\n  try {\r\n    let playerData = playersInPhaseMode.get(player.id) || initializePlayerTracking(player);\r\n\r\n    const currentSpeed = calculatePlayerSpeed(player, playerData.lastPosition);\r\n    playerData.lastPosition = player.location;\r\n    playerData.previousSpeed = currentSpeed;\r\n\r\n    if (currentSpeed > config.speedThresholdBps) {\r\n      if (config.debugMessages) {\r\n        world.sendMessage(`§e${player.name} triggered phase mode at ${currentSpeed.toFixed(1)} b/s`);\r\n      }\r\n      enterPhaseMode(player);\r\n    } else if (!playersInPhaseMode.has(player.id)) {\r\n      playersInPhaseMode.set(player.id, playerData);\r\n    }\r\n  } catch (e: any) {\r\n    if (config.debugMessages) {\r\n      world.sendMessage(`§c${player.name}: ${e.message}`);\r\n    }\r\n    // If we can't get speed, don't update player state\r\n  }\r\n}\r\n\r\n/**\r\n * Updates a single player's phase state\r\n */\r\nfunction updatePlayerPhaseState(player: Player): void {\r\n  if (\r\n    !playersInPhaseMode.has(player.id) &&\r\n    (player.getGameMode() === GameMode.creative || player.getGameMode() === GameMode.spectator)\r\n  ) {\r\n    return; // Skip creative and spectator players not already being tracked\r\n  }\r\n\r\n  const phaseData = playersInPhaseMode.get(player.id);\r\n\r\n  if (phaseData && player.getGameMode() === GameMode.spectator) {\r\n    updateExistingPhasePlayer(player, phaseData);\r\n  } else {\r\n    updateRegularPlayer(player);\r\n  }\r\n}\r\n\r\n/**\r\n * Updates all players' phase status based on speed and conditions\r\n */\r\nfunction updatePlayersInPhaseMode(): void {\r\n  const players = world.getAllPlayers();\r\n\r\n  for (const player of players) {\r\n    logPlayerDebugInfo(player);\r\n    updatePlayerPhaseState(player);\r\n  }\r\n\r\n  // Clean up players who have left the game\r\n  for (const [playerId, data] of playersInPhaseMode.entries()) {\r\n    try {\r\n      // This will throw if the player has left the game\r\n      const _ = data.player.location;\r\n    } catch (e) {\r\n      playersInPhaseMode.delete(playerId);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Update the phantom phase configuration\r\n */\r\nexport function updatePhaseConfig(newConfig: Partial<PhaseConfig>): void {\r\n  config = {\r\n    ...config,\r\n    ...newConfig,\r\n  };\r\n\r\n  if (config.debugMessages) {\r\n    world.sendMessage(`§7Phase mode configuration updated:`);\r\n    world.sendMessage(`§7Speed threshold: §f${config.speedThresholdBps.toFixed(1)} §7blocks/second`);\r\n    world.sendMessage(`§7Exit threshold: §f${config.exitSpeedThresholdBps.toFixed(1)} §7blocks/second`);\r\n  }\r\n}\r\n\r\n/**\r\n * Initializes the phantom phase system that switches fast-moving players to spectator mode\r\n */\r\nexport function initializePhantomPhase(customConfig?: Partial<PhaseConfig>) {\r\n  // Apply any custom configuration\r\n  if (customConfig) {\r\n    updatePhaseConfig(customConfig);\r\n  }\r\n\r\n  world.sendMessage(\"§2Phantom Phase system activated!\");\r\n  world.sendMessage(`§7Phase speed threshold: §f${config.speedThresholdBps.toFixed(1)} §7blocks/second`);\r\n  world.sendMessage(`§7Exit speed threshold: §f${config.exitSpeedThresholdBps.toFixed(1)} §7blocks/second`);\r\n\r\n  // Initialize tracking for all current players\r\n  for (const player of world.getAllPlayers()) {\r\n    if (\r\n      !playersInPhaseMode.has(player.id) &&\r\n      player.getGameMode() !== GameMode.creative &&\r\n      player.getGameMode() !== GameMode.spectator\r\n    ) {\r\n      playersInPhaseMode.set(player.id, initializePlayerTracking(player));\r\n    }\r\n  }\r\n\r\n  // Set up regular update interval for phase mode system\r\n  system.runInterval(updatePlayersInPhaseMode, config.speedCheckInterval);\r\n}\r\n"],"mappings":"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","names":["world","system","world","system"],"file":"../scripts/main.js"}